{"version":3,"sources":["background/delaunay.js","background/moving-triangles.js"],"names":["Delaunay","pointInCircle","a","b","c","p","dx","x","dy","y","ex","ey","fx","fy","bp","cp","sign","p1","p2","p3","pointInTriangle","pt","v1","v2","v3","d1","d2","d3","Node","key","vertices","children","node","push","TriangleGraph","nodes","Map","set","parentKeys","length","newNode","undefined","forEach","parentKey","parentNode","get","addChild","values","size","Vertex","pos","incEdge","id","HalfEdge","origin","twin","incFace","next","prev","Face","graphKey","points","debugCtx","halfEdges","faces","FAR_AWAY","tempPositions","i","triangleGraph","triangulate","point","triangle","containingTriangle","splitTriangle","newVertex","edge","legalizeEdge","newHalfEdges","leftEdge","e1","e2","outerFaceEdges","getFaceHalfEdges","newFaces","e3","newFace","addNode","console","error","concat","face","adjacentFace","testPoint","incFaceEdge1","incFaceEdge2","faceEdge1","faceEdge2","getFaceVertices","currentNode","safety","foundChild","child","edges","Error","log","triangles","triangleIterator","getValues","value","ctx","beginPath","canvas","width","height","moveTo","lineTo","strokeStyle","lineWidth","stroke","Circle","color","radius","position","velocity","staticObject","visible","arc","Math","PI","fillStyle","fill","main","document","getElementById","getContext","resizeCanvas","fps","numCircles","circleSpeedRange","circleRadius","circles","idCounter","delaunay","circleColor","drawEdges","triangleColorGradient","setupScene","floor","clientWidth","clientHeight","min","createCircles","j","direction","velocityX","random","velocityY","edgeCircle","circle","circlesUpdated","realToCSSPixels","window","devicePixelRatio","displayWidth","displayHeight","getTriangleMidpoint","max","setInterval","update","requestAnimationFrame","render","draw","fillRect","delaunayData","getTriangleData","drawTriangles","heightRatio","color1","color2","w1","w2","rgb","ratio","round","join","getGradientColor"],"mappings":"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","file":"moving-triangles.239bd14c.js","sourceRoot":"../src","sourcesContent":["function pointInCircle(a, b, c, p) {\n  const dx = a.x - p.x;\n  const dy = a.y - p.y;\n  const ex = b.x - p.x;\n  const ey = b.y - p.y;\n  const fx = c.x - p.x;\n  const fy = c.y - p.y;\n\n  const ap = dx * dx + dy * dy;\n  const bp = ex * ex + ey * ey;\n  const cp = fx * fx + fy * fy;\n\n  return (\n    dx * (ey * cp - bp * fy) -\n      dy * (ex * cp - bp * fx) +\n      ap * (ex * fy - ey * fx) <\n    0\n  );\n}\n\nfunction sign(p1, p2, p3) {\n  return (p1.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (p1.y - p3.y);\n}\n\nfunction pointInTriangle(pt, v1, v2, v3) {\n  const d1 = sign(pt, v1, v2);\n  const d2 = sign(pt, v2, v3);\n  const d3 = sign(pt, v3, v1);\n\n  const has_neg = d1 < 0 || d2 < 0 || d3 < 0;\n  const has_pos = d1 > 0 || d2 > 0 || d3 > 0;\n\n  return !(has_neg && has_pos);\n}\n\n/* \n  Directed Acylic Graph\n\n  Used to find what triangle a point is within\n*/\nclass Node {\n  constructor(key, vertices) {\n    this.key = key;\n    this.vertices = vertices;\n    this.children = [];\n  }\n\n  addChild(node) {\n    this.children.push(node);\n  }\n}\n\nclass TriangleGraph {\n  constructor(key, vertices) {\n    this.nodes = new Map();\n    this.nodes.set(key, new Node(key, vertices));\n  }\n\n  addNode(parentKeys, key, vertices) {\n    if (parentKeys.length == 0) return false;\n    let newNode = undefined;\n    parentKeys.forEach((parentKey) => {\n      const parentNode = this.nodes.get(parentKey);\n      if (parentNode) {\n        if (newNode == undefined) {\n          newNode = new Node(key, vertices);\n          this.nodes.set(key, newNode);\n        }\n        parentNode.addChild(newNode);\n      }\n    });\n    return true;\n  }\n\n  getValues() {\n    return this.nodes.values();\n  }\n\n  size() {\n    return this.nodes.size;\n  }\n}\n\nclass Vertex {\n  constructor(pos, incEdge, id) {\n    this.pos = pos;\n    this.incEdge = incEdge;\n    this.id = id;\n  }\n}\n\nclass HalfEdge {\n  constructor({ origin, twin, incFace, next, prev }) {\n    this.origin = origin;\n    this.twin = twin;\n    this.incFace = incFace;\n    this.next = next;\n    this.prev = prev;\n  }\n}\n\nclass Face {\n  constructor(incEdge, graphKey) {\n    this.incEdge = incEdge;\n    this.graphKey = graphKey;\n  }\n}\n\nclass Delaunay {\n  constructor(points, debugCtx) {\n    this.points = points;\n    this.debugCtx = debugCtx;\n\n    this.vertices = [];\n    this.halfEdges = [];\n    this.faces = []; // Contains index of a half-edge belonging to that face\n\n    // Create triangle base triangle that \"encapsulates\" all points\n    const FAR_AWAY = 100000;\n    const tempPositions = [\n      { x: -FAR_AWAY, y: -FAR_AWAY },\n      { x: 500, y: FAR_AWAY },\n      { x: FAR_AWAY, y: -FAR_AWAY },\n    ];\n    for (let i = 0; i < 3; i++) {\n      //this.vertices.push(new Vertex(`p${i}`, undefined));\n      this.vertices.push(\n        new Vertex(tempPositions[i], undefined, this.vertices.length)\n      );\n    }\n    for (let i = 0; i < 6; i++) {\n      this.halfEdges.push(\n        new HalfEdge({\n          origin: undefined,\n          twin: undefined,\n          incFace: undefined,\n          next: undefined,\n          prev: undefined,\n        })\n      );\n    }\n    this.faces.push(new Face(this.halfEdges[0], 0));\n    this.triangleGraph = new TriangleGraph(0, tempPositions);\n\n    // Now fill in proper values\n    this.vertices[0].incEdge = this.halfEdges[0];\n    this.vertices[1].incEdge = this.halfEdges[1];\n    this.vertices[2].incEdge = this.halfEdges[2];\n\n    this.halfEdges[0].origin = this.vertices[0];\n    this.halfEdges[0].twin = this.halfEdges[3];\n    this.halfEdges[0].incFace = this.faces[0];\n    this.halfEdges[0].next = this.halfEdges[1];\n    this.halfEdges[0].prev = this.halfEdges[2];\n\n    this.halfEdges[1].origin = this.vertices[1];\n    this.halfEdges[1].twin = this.halfEdges[4];\n    this.halfEdges[1].incFace = this.faces[0];\n    this.halfEdges[1].next = this.halfEdges[2];\n    this.halfEdges[1].prev = this.halfEdges[0];\n\n    this.halfEdges[2].origin = this.vertices[2];\n    this.halfEdges[2].twin = this.halfEdges[5];\n    this.halfEdges[2].incFace = this.faces[0];\n    this.halfEdges[2].next = this.halfEdges[0];\n    this.halfEdges[2].prev = this.halfEdges[1];\n\n    this.halfEdges[3].origin = this.vertices[1];\n    this.halfEdges[3].twin = this.halfEdges[0];\n    this.halfEdges[3].incFace = null;\n    this.halfEdges[3].next = this.halfEdges[4];\n    this.halfEdges[3].prev = this.halfEdges[5];\n\n    this.halfEdges[4].origin = this.vertices[2];\n    this.halfEdges[4].twin = this.halfEdges[1];\n    this.halfEdges[4].incFace = null;\n    this.halfEdges[4].next = this.halfEdges[5];\n    this.halfEdges[4].prev = this.halfEdges[3];\n\n    this.halfEdges[5].origin = this.vertices[0];\n    this.halfEdges[5].twin = this.halfEdges[2];\n    this.halfEdges[5].incFace = null;\n    this.halfEdges[5].next = this.halfEdges[3];\n    this.halfEdges[5].prev = this.halfEdges[4];\n\n    this.triangulate();\n  }\n\n  triangulate() {\n    for (let i = 0; i < this.points.length; i++) {\n      const point = this.points[i];\n      const triangle = this.containingTriangle(point);\n      if (triangle === undefined) break;\n\n      /* Need case for when point lies on edge of triangle? */\n\n      const [newVertex, affectedEdges] = this.splitTriangle(point, triangle);\n\n      affectedEdges.forEach((edge) => {\n        this.legalizeEdge(newVertex, edge);\n      });\n    }\n  }\n\n  splitTriangle(point, triangle) {\n    // First create new vertex from point\n    const newVertex = new Vertex(point, undefined, this.vertices.length);\n\n    // Next create half-edges\n    let newHalfEdges = [];\n    for (let i = 0; i < 6; i++) {\n      let leftEdge = i % 2 == 0 ? true : false;\n      newHalfEdges.push(\n        new HalfEdge({\n          origin: leftEdge ? newVertex : undefined,\n          twin: undefined,\n          incFace: undefined,\n          next: undefined,\n          prev: undefined,\n        })\n      );\n    }\n    // Assign half-edge twins\n    for (let i = 0; i < 3; i++) {\n      const e1 = newHalfEdges[i * 2];\n      const e2 = i == 0 ? newHalfEdges[5] : newHalfEdges[i * 2 - 1];\n      e1.twin = e2;\n      e2.twin = e1;\n    }\n\n    // Now create each new face and re-assign relevant next/prev edges\n    const outerFaceEdges = this.getFaceHalfEdges(triangle);\n    let newFaces = [];\n    for (let i = 0; i < 3; i++) {\n      let e1 = outerFaceEdges[i];\n      let e2 = newHalfEdges[i * 2 + 1];\n      let e3 = newHalfEdges[i * 2];\n      const newFace = new Face(e3, this.faces.length + i);\n\n      e2.origin = e1.next.origin;\n\n      e1.next = e2;\n      e1.prev = e3;\n      e1.incFace = newFace;\n      e2.next = e3;\n      e2.prev = e1;\n      e2.incFace = newFace;\n      e3.next = e1;\n      e3.prev = e2;\n      e3.incFace = newFace;\n\n      newFaces.push(newFace);\n      const vertices = [e1.origin.id, e2.origin.id, e3.origin.id];\n      if (\n        !this.triangleGraph.addNode(\n          [triangle.graphKey],\n          newFace.graphKey,\n          vertices\n        )\n      ) {\n        console.error(\"Error adding face to triangle graph:\", newFace);\n      }\n    }\n\n    // Point vertex to first new half-edge\n    newVertex.incEdge = newHalfEdges[0];\n\n    // Add new items\n    this.vertices.push(newVertex);\n    this.halfEdges = this.halfEdges.concat(newHalfEdges);\n    this.faces = this.faces.concat(newFaces);\n\n    return [newVertex, outerFaceEdges];\n  }\n\n  legalizeEdge(newVertex, edge) {\n    const face = edge.incFace;\n    const adjacentFace = edge.twin.incFace;\n    if (adjacentFace == null) {\n      return;\n    } else {\n      // Check if edge needs to be flipped\n      const testPoint = edge.twin.prev.origin.pos;\n      if (\n        pointInCircle(\n          newVertex.pos,\n          edge.origin.pos,\n          edge.twin.origin.pos,\n          testPoint\n        )\n      ) {\n        const incFaceEdge1 = edge.twin.prev;\n        const incFaceEdge2 = edge.twin.next;\n        const faceEdge1 = edge.next;\n        const faceEdge2 = edge.prev;\n\n        // Flip edge\n        edge.next = incFaceEdge1;\n        edge.prev = faceEdge1;\n        edge.twin.next = faceEdge2;\n        edge.twin.prev = incFaceEdge2;\n        edge.origin = faceEdge2.origin;\n        edge.twin.origin = incFaceEdge1.origin;\n\n        // Correct Edges\n        incFaceEdge1.prev = edge;\n        incFaceEdge1.next = faceEdge1;\n        faceEdge1.prev = incFaceEdge1;\n        faceEdge1.next = edge;\n\n        faceEdge2.prev = edge.twin;\n        faceEdge2.next = incFaceEdge2;\n        incFaceEdge2.prev = faceEdge2;\n        incFaceEdge2.next = edge.twin;\n\n        // Create two new faces\n        const newFaces = [\n          new Face(faceEdge2, this.faces.length),\n          new Face(faceEdge1, this.faces.length + 1),\n        ];\n        edge.twin.incFace = newFaces[0];\n        faceEdge2.incFace = newFaces[0];\n        incFaceEdge2.incFace = newFaces[0];\n        edge.incFace = newFaces[1];\n        incFaceEdge1.incFace = newFaces[1];\n        faceEdge1.incFace = newFaces[1];\n\n        for (const newFace of newFaces) {\n          const [v1, v2, v3] = this.getFaceVertices(newFace);\n          if (\n            !this.triangleGraph.addNode(\n              [face.graphKey, adjacentFace.graphKey],\n              newFace.graphKey,\n              [v1.id, v2.id, v3.id]\n            )\n          ) {\n            console.error(\"Error adding face to triangle graph:\", newFace);\n          }\n          this.faces.push(newFace);\n        }\n\n        // Since edge flip could have affected triangles next to original adjacent triangle, check them\n        this.legalizeEdge(newVertex, incFaceEdge1);\n        this.legalizeEdge(newVertex, incFaceEdge2);\n      }\n    }\n  }\n\n  containingTriangle(point) {\n    let currentNode = this.triangleGraph.nodes.get(0);\n    let safety = 0;\n    while (currentNode.children.length > 0) {\n      let foundChild = false;\n      for (const child of currentNode.children) {\n        //const vertices = child.vertices;\n        const vertices = [\n          this.vertices[child.vertices[0]].pos,\n          this.vertices[child.vertices[1]].pos,\n          this.vertices[child.vertices[2]].pos,\n        ];\n        if (pointInTriangle(point, vertices[0], vertices[1], vertices[2])) {\n          currentNode = child;\n          foundChild = true;\n          break;\n        }\n      }\n      if (!foundChild) {\n        console.error(\"Uh oh. Triangle had children but none matched.\", point);\n        return undefined;\n      }\n\n      safety++;\n      if (safety > 10000) {\n        console.error(\"Infinite loop here\");\n        break;\n      }\n    }\n    return this.faces[currentNode.key];\n  }\n\n  getFaceHalfEdges(face) {\n    let edges = [face.incEdge];\n    let edge = edges[0];\n\n    let safety = 0;\n    while (edge.next.origin != edges[0].origin) {\n      edges.push(edge.next);\n      edge = edge.next;\n\n      safety++;\n      if (safety > 10000) {\n        console.error(\"Infinite loop here\");\n        break;\n      }\n    }\n    return edges;\n  }\n\n  getFaceVertices(face) {\n    let edge = face.incEdge;\n    let vertices = [edge.origin];\n\n    let safety = 0;\n    while (edge.next.origin != vertices[0]) {\n      edge = edge.next;\n      vertices.push(edge.origin);\n\n      safety++;\n      if (safety > 10000) {\n        throw new Error(\"Infinite loop here\");\n      }\n    }\n    return vertices;\n  }\n\n  printFace(face) {\n    const edges = this.getFaceHalfEdges(face);\n    console.log(\"FACE INDEX:\", face);\n    for (let i = 0; i < edges.length; i++) {\n      console.log(edges[i].origin.pos, \"TO\", edges[i].twin.origin.pos);\n      console.log(edges[i]);\n    }\n  }\n\n  getTriangleData() {\n    let vertices = [];\n    for (let i = 3; i < this.vertices.length; i++) {\n      vertices.push(this.vertices[i].pos);\n    }\n    let triangles = [];\n    const triangleIterator = this.triangleGraph.getValues();\n    for (let i = 0; i < this.triangleGraph.size(); i++) {\n      const triangle = triangleIterator.next().value;\n      if (triangle.children.length != 0) continue;\n      const [v1, v2, v3] = triangle.vertices;\n      if (v1 < 3 || v2 < 3 || v3 < 3) continue;\n      triangles.push([v1 - 3, v2 - 3, v3 - 3]);\n    }\n    return { vertices: vertices, triangles: triangles };\n  }\n\n  debugDraw(ctx) {\n    // // Clear canvas\n    // ctx.fillStyle = \"#f0f0f0\";\n    // ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    for (const face of this.faces) {\n      const edges = this.getFaceHalfEdges(face);\n      for (const edge of edges) {\n        ctx.beginPath();\n        let v1 = [edge.origin.pos.x, edge.origin.pos.y];\n        let v2 = [edge.twin.origin.pos.x, edge.twin.origin.pos.y];\n        let p1 = [ctx.canvas.width * -5, ctx.canvas.height * -5];\n        let p2 = [ctx.canvas.width * 5, ctx.canvas.height * -5];\n        let p3 = [ctx.canvas.width / 2, ctx.canvas.height * 5];\n        if (typeof edge.origin.pos === \"string\") {\n          if (edge.origin.pos === \"p0\") {\n            v1 = p1;\n          } else if (edge.origin.pos === \"p1\") {\n            v1 = p2;\n          } else {\n            v1 = p3;\n          }\n        }\n        if (typeof edge.twin.origin.pos === \"string\") {\n          if (edge.twin.origin.pos === \"p0\") {\n            v2 = p1;\n          } else if (edge.twin.origin.pos === \"p1\") {\n            v2 = p2;\n          } else {\n            v2 = p3;\n          }\n        }\n\n        ctx.moveTo(v1[0], v1[1]);\n        ctx.lineTo(v2[0], v2[1]);\n        ctx.strokeStyle = \"green\";\n        ctx.lineWidth = 2;\n        ctx.stroke();\n      }\n    }\n  }\n}\n\nexport default Delaunay;\n","import Delaunay from \"./delaunay\";\n\nclass Circle {\n  constructor({\n    id,\n    color,\n    radius,\n    position,\n    velocity,\n    staticObject,\n    visible,\n  }) {\n    this.id = id;\n    this.color = color;\n    this.radius = radius;\n    this.position = position;\n    this.velocity = velocity;\n    this.staticObject = staticObject;\n    this.visible = visible;\n  }\n\n  update(canvas) {\n    if (this.staticObject) return;\n\n    this.position.x += this.velocity.x;\n    this.position.y += this.velocity.y;\n\n    if (\n      this.position.x - this.radius < 0 ||\n      this.position.x + this.radius > canvas.width\n    ) {\n      this.velocity.x *= -1;\n    }\n    if (\n      this.position.y - this.radius < 0 ||\n      this.position.y + this.radius > canvas.height\n    ) {\n      this.velocity.y *= -1;\n    }\n  }\n\n  draw(ctx) {\n    if (!this.visible) return;\n    ctx.beginPath();\n    ctx.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI);\n    ctx.fillStyle = this.color;\n    ctx.fill();\n  }\n}\n\nconst main = (function () {\n  const canvas = document.getElementById(\"background-canvas\");\n  const ctx = canvas.getContext(\"2d\");\n\n  resizeCanvas(canvas);\n\n  // Constants\n  const fps = 60;\n  const circleColor = \"#edededbb\";\n  const drawEdges = false;\n  const lineColor = \"#B5B0FB66\";\n  const lineWidth = 1;\n  const triangleColorGradient = [\n    [87, 75, 250],\n    [87, 250, 160],\n  ];\n\n  // Non-constants\n  let numCircles,\n    circleSpeedRange,\n    circleRadius,\n    circles,\n    idCounter,\n    points,\n    delaunay,\n    delaunayData;\n\n  // Setup scene\n  function setupScene() {\n    numCircles = {\n      x: Math.floor(canvas.clientWidth / 125),\n      y: Math.floor(canvas.clientHeight / 125),\n    };\n\n    circleSpeedRange = [0.6, 0.9];\n    circleRadius = Math.min(0.003 * canvas.height, 7);\n    circles = [];\n    idCounter = 0;\n\n    points = [];\n    delaunay = undefined;\n\n    createCircles();\n  }\n\n  setupScene();\n  // Initialize update loop. Locked to specific FPS\n  let circlesUpdated = false;\n  setInterval(update, 1000 / fps);\n\n  requestAnimationFrame(render);\n\n  function update() {\n    const resized = resizeCanvas(canvas);\n    if (resized) {\n      setupScene();\n    }\n    points = [];\n    for (let i = 0; i < circles.length; i++) {\n      circles[i].update(canvas);\n      points.push(circles[i].position);\n    }\n    delaunay = new Delaunay(points, ctx);\n    circlesUpdated = true;\n  }\n\n  function draw() {\n    if (!circlesUpdated) return;\n    if (delaunay === undefined) return;\n    circlesUpdated = false;\n    // Clear canvas\n    ctx.fillStyle = \"#f0f0f0\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    const delaunayData = delaunay.getTriangleData();\n    drawTriangles(\n      ctx,\n      delaunayData.vertices,\n      delaunayData.triangles,\n      drawEdges\n    );\n\n    for (let i = 0; i < circles.length; i++) {\n      circles[i].draw(ctx);\n    }\n  }\n\n  function render() {\n    draw();\n\n    requestAnimationFrame(render);\n  }\n\n  function resizeCanvas(canvas) {\n    var realToCSSPixels = window.devicePixelRatio;\n    // Lookup the size the browser is displaying the canvas in CSS pixels\n    // and compute a size needed to make our drawingbuffer match it in\n    // device pixels.\n    var displayWidth = Math.floor(canvas.clientWidth * realToCSSPixels);\n    var displayHeight = Math.floor(canvas.clientHeight * realToCSSPixels);\n\n    // Check if the canvas is not the same size.\n    if (canvas.width !== displayWidth || canvas.height !== displayHeight) {\n      // Make the canvas the same size\n      canvas.width = displayWidth;\n      canvas.height = displayHeight;\n      return true;\n    }\n    return false;\n  }\n\n  function createCircles() {\n    circles = [];\n    const dx = canvas.width / (numCircles.x + 1);\n    const dy = canvas.height / (numCircles.y + 1);\n\n    // Create grid of circles\n    for (let i = 0; i <= numCircles.y + 1; i++) {\n      for (let j = 0; j <= numCircles.x + 1; j++) {\n        const pos = { x: j * dx, y: i * dy };\n        const direction = [1, -1];\n        const velocityX =\n          (Math.random() * (circleSpeedRange[1] - circleSpeedRange[0]) +\n            circleSpeedRange[0]) *\n          direction[Math.floor(Math.random() * 2)];\n        const velocityY =\n          (Math.random() * (circleSpeedRange[1] - circleSpeedRange[0]) +\n            circleSpeedRange[0]) *\n          direction[Math.floor(Math.random() * 2)];\n        const edgeCircle =\n          i === 0 || j === 0 || j === numCircles.x + 1 || i === numCircles.y + 1\n            ? true\n            : false;\n        const circle = new Circle({\n          id: idCounter,\n          color: circleColor,\n          radius: circleRadius,\n          position: pos,\n          velocity: { x: velocityX, y: velocityY },\n          staticObject: edgeCircle ? true : false,\n          visible: edgeCircle ? false : true,\n        });\n\n        idCounter++;\n        circles.push(circle);\n      }\n    }\n  }\n\n  function getGradientColor(color1, color2, ratio) {\n    var w1 = 1 - ratio;\n    var w2 = ratio;\n    var rgb = [\n      Math.round(color1[0] * w1 + color2[0] * w2),\n      Math.round(color1[1] * w1 + color2[1] * w2),\n      Math.round(color1[2] * w1 + color2[2] * w2),\n    ];\n    return rgb;\n  }\n\n  function drawTriangles(ctx, vertices, triangles, drawEdges) {\n    for (let i = 0; i < triangles.length; i++) {\n      const triangle = triangles[i];\n      const [v1, v2, v3] = [\n        vertices[triangle[0]],\n        vertices[triangle[1]],\n        vertices[triangle[2]],\n      ];\n      ctx.beginPath();\n      ctx.moveTo(v1.x, v1.y);\n      ctx.lineTo(v2.x, v2.y);\n      ctx.lineTo(v3.x, v3.y);\n      const heightRatio = getTriangleMidpoint([v1, v2, v3]).y / canvas.height;\n      const color = getGradientColor(\n        triangleColorGradient[0],\n        triangleColorGradient[1],\n        heightRatio\n      );\n      ctx.fillStyle = `rgb(${color.join()})`;\n      ctx.fill();\n\n      ctx.strokeStyle = drawEdges ? circleColor : ctx.fillStyle;\n      ctx.lineTo(v1.x, v1.y);\n\n      ctx.lineWidth = lineWidth;\n      ctx.stroke();\n    }\n  }\n  function getTriangleMidpoint(vertices) {\n    let min = { x: undefined, y: undefined };\n    let max = { x: undefined, y: undefined };\n\n    for (let i = 0; i < vertices.length; i++) {\n      if (vertices[i].x < min.x || min.x === undefined) {\n        min.x = vertices[i].x;\n      }\n      if (vertices[i].x > max.x || max.x === undefined) {\n        max.x = vertices[i].x;\n      }\n      if (vertices[i].y < min.y || min.y === undefined) {\n        min.y = vertices[i].y;\n      }\n      if (vertices[i].y > max.y || max.y === undefined) {\n        max.y = vertices[i].y;\n      }\n    }\n    return { x: (max.x - min.x) / 2 + min.x, y: (max.y - min.y) / 2 + min.y };\n  }\n})();\n"]}